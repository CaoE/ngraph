//*****************************************************************************
// Copyright 2017-2020 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

// !!!!!!!!!!!!!! THIS FILE IS AUTOGENERATED OUTSIDE OF THE BUILD PROCESS !!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT THIS FILE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//
// DO NOT EDIT THIS FILE. If you want to add new tests, you should edit
//  test/ref_generators/generate_dyn_slice_ref.py and regenerate this file.
//
// To regenerate:
//
//   $ cd <ngraph source dir>/test
//   $ ./update_dyn_slice_reference.sh
//
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT THIS FILE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!! THIS FILE IS AUTOGENERATED OUTSIDE OF THE BUILD PROCESS !!!!!!!!!!!!!!
//
// clang-format off

#include <algorithm>
#include <cmath>

#include "gtest/gtest.h"

#include "ngraph/ngraph.hpp"
#include "ngraph/opsets/opset1.hpp"
#include "ngraph/opsets/opset3.hpp"
#include "util/test_tools.hpp"
#include "util/autodiff/numeric_compare.hpp"
#include "util/all_close_f.hpp"
#include "util/test_control.hpp"

using namespace std;
using namespace ngraph;

static string s_manifest = "${MANIFEST}";

template <typename T>
void check_failure(const element::Type& input_element_type,
                   const Shape& input_shape,
                   const std::vector<int64_t>& lb_values,
                   const std::vector<int64_t>& ub_values,
                   const std::vector<int64_t>& strides_values,
                   const AxisSet& lb_mask,
                   const AxisSet& ub_mask,
                   const AxisSet& new_mask,
                   const AxisSet& shrink_mask,
                   const AxisSet& ellipsis_mask)
{
    auto arg = std::make_shared<op::Parameter>(input_element_type, input_shape);
    auto lb = std::make_shared<op::Parameter>(element::i64, Shape{lb_values.size()});
    auto ub = std::make_shared<op::Parameter>(element::i64, Shape{ub_values.size()});
    auto strides = std::make_shared<op::Parameter>(element::i64, Shape{strides_values.size()});

    std::vector<T> input_values(shape_size(input_shape));
    std::iota(input_values.begin(), input_values.end(), static_cast<T>(0));

    EXPECT_ANY_THROW({
        auto slice = std::make_shared<op::DynSlice>(arg, lb, ub, strides, lb_mask, ub_mask, new_mask, shrink_mask, ellipsis_mask);

        auto f = std::make_shared<Function>(NodeVector{slice}, ParameterVector{arg, lb, ub, strides});

        auto backend = runtime::Backend::create("${BACKEND_NAME}",true);
        auto ex = backend->compile(f);

        auto input_arg = backend->create_tensor(input_element_type, input_shape);
        auto input_lb = backend->create_tensor(element::i64, Shape{lb_values.size()});
        auto input_ub = backend->create_tensor(element::i64, Shape{ub_values.size()});
        auto input_strides = backend->create_tensor(element::i64, Shape{strides_values.size()});
        copy_data(input_arg, input_values);
        copy_data(input_lb, lb_values);
        copy_data(input_ub, ub_values);
        copy_data(input_strides, strides_values);

        auto output = backend->create_dynamic_tensor(input_element_type, PartialShape::dynamic());

        ex->call_with_validate({output}, {input_arg, input_lb, input_ub, input_strides});
    });
}
std::shared_ptr<ngraph::Node> calculate_output_shape(
        const std::vector<int64_t> & begin,
        const std::vector<int64_t> & end,
        const std::vector<int64_t> & strides,
        const ngraph::AxisSet & begin_mask,
        const ngraph::AxisSet & end_mask,
        const ngraph::Output<ngraph::Node> & input_shape) {
    const auto shape_type = input_shape.get_element_type();

    ngraph::OutputVector output_dimensions;
    for (int64_t axis = 0; axis < input_shape.get_partial_shape()[0].get_length(); ++axis) {
        auto lb = begin[axis], ub = end[axis], stride = strides[axis];

        ngraph::Output<ngraph::Node> lower_bound = ngraph::opset3::Constant::create(shape_type, {1}, {lb});
        ngraph::Output<ngraph::Node> upper_bound = ngraph::opset3::Constant::create(shape_type, {1}, {ub});

        const auto shape_dim = std::make_shared<ngraph::opset3::Gather>(input_shape, ngraph::opset3::Constant::create(shape_type, {1}, {axis}),
                                                                        ngraph::opset3::Constant::create(shape_type, {}, {0}));
        const auto shape_dim_minus_one = std::make_shared<ngraph::opset3::Add>(shape_dim, ngraph::opset3::Constant::create(shape_type, {1}, {-1}));


        // convert negative indexes to positive
        // take max for this case: if abs(lb) > input_shape[input_shape_idx],then after
        // conversion lb < 0
        // so according to tensorflow and numpy we just get 0
        if (lb < 0)
            lower_bound = std::make_shared<ngraph::opset3::Maximum>(
                    std::make_shared<ngraph::opset3::Add>(lower_bound, shape_dim),
                    ngraph::opset3::Constant::create(shape_type, {1}, {0}));
        if (ub < 0)
            upper_bound = std::make_shared<ngraph::opset3::Maximum>(
                    std::make_shared<ngraph::opset3::Add>(upper_bound, shape_dim),
                    ngraph::opset3::Constant::create(shape_type, {1}, {0}));

        // apply restrictions when begin or end values more than max possible values.
        lower_bound = std::make_shared<ngraph::opset3::Minimum>(shape_dim, lower_bound);
        upper_bound = std::make_shared<ngraph::opset3::Minimum>(shape_dim, upper_bound);

        ngraph::Output<ngraph::Node> output_dimension = ngraph::opset3::Constant::create(shape_type, {1}, {0});
        if (stride < 0) {
            // apply masks
            if (begin_mask.count(axis))
                lower_bound = shape_dim_minus_one;
            if (end_mask.count(axis))
                upper_bound = ngraph::opset3::Constant::create(shape_type, {1}, {-1});

            lower_bound = std::make_shared<ngraph::opset3::Minimum>(lower_bound, shape_dim_minus_one);
            // we always get 1st element, so we need decrease range
            lower_bound = std::make_shared<ngraph::opset3::Add>(lower_bound, ngraph::opset3::Constant::create(shape_type, {1}, {-1}));
            output_dimension = std::make_shared<ngraph::opset3::Select>(
                    std::make_shared<ngraph::opset3::LessEqual>(upper_bound, lower_bound),
                    std::make_shared<ngraph::opset3::Add>(
                            std::make_shared<ngraph::opset3::Divide>(std::make_shared<ngraph::opset3::Subtract>(upper_bound, lower_bound),
                                                                     ngraph::opset3::Constant::create(shape_type, {1}, {stride})),
                            ngraph::opset3::Constant::create(shape_type, {1}, {1})),
                    output_dimension);
        } else {
            // apply masks
            if (begin_mask.count(axis))
                lower_bound = ngraph::opset3::Constant::create(shape_type, {1}, {0});
            if (end_mask.count(axis))
                upper_bound = shape_dim;
            // we always get 1st element, so we need decrease range
            lower_bound = std::make_shared<ngraph::opset3::Add>(lower_bound, ngraph::opset3::Constant::create(shape_type, {1}, {1}));
            output_dimension = std::make_shared<ngraph::opset3::Select>(
                    std::make_shared<ngraph::opset3::GreaterEqual>(upper_bound, lower_bound),
                    std::make_shared<ngraph::opset3::Add>(
                            std::make_shared<ngraph::opset3::Divide>(std::make_shared<ngraph::opset3::Subtract>(upper_bound, lower_bound),
                                                                     ngraph::opset3::Constant::create(shape_type, {1}, {stride})),
                            ngraph::opset3::Constant::create(shape_type, {1}, {1})),
                    output_dimension);
        }
        output_dimensions.push_back(output_dimension);
    }
    const auto output_shape = std::make_shared<ngraph::opset3::Concat>(output_dimensions, 0);
    return output_shape;
}

void check(const element::Type& input_element_type,
                   const std::vector<int64_t>& input_shape,
                   const std::vector<int64_t>& lb_values,
                   const std::vector<int64_t>& ub_values,
                   const std::vector<int64_t>& strides_values,
                   const AxisSet& lb_mask,
                   const AxisSet& ub_mask,
                   const std::vector<int64_t>& expected_output_shape)
{
    std::cout << "REAL PASS" << std::endl;

    std::vector<uint32_t> input_values(shape_size(input_shape));
    std::iota(input_values.begin(), input_values.end(), static_cast<int64_t >(0));

    auto in_shape = std::make_shared<op::Parameter>(element::i64, Shape{input_shape.size()});
    auto out_node = calculate_output_shape(lb_values, ub_values, strides_values, lb_mask, ub_mask, in_shape);
    auto f = std::make_shared<Function>(NodeVector{out_node}, ParameterVector{in_shape});

    auto backend = runtime::Backend::create("${BACKEND_NAME}",true);
    auto ex = backend->compile(f);

    auto input_shape_tensor = backend->create_tensor(element::i64, Shape{input_shape.size()});
    copy_data(input_shape_tensor, input_shape);
    auto output = backend->create_dynamic_tensor(input_element_type, PartialShape::dynamic());

    ex->call_with_validate({output}, {input_shape_tensor});
    auto output_values = read_vector<int64_t>(output);
    for(auto &i : output_values)
        cout << i << " ";
    cout << endl;
    for (auto &i : expected_output_shape)
        cout << i << " ";

    EXPECT_EQ(output->get_element_type(), input_element_type);
    EXPECT_EQ(output_values, expected_output_shape);
}

// slices are: [1:3]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_0)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_1)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{2},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{});
}

// slices are: [3:0:-2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_2)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [3::-2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_3)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{2});
}

// slices are: [4::-2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_4)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{2});
}

// slices are: [5::-2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_5)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{2});
}

// slices are: [-9000:-8000:2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{0}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_6)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{-9000},
                  std::vector<int64_t>{-8000},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{0});
}

// slices are: [-9000:8000:2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_7)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{-9000},
                  std::vector<int64_t>{8000},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [-5:5:2]
// dtype is: int64
// input shape is: Shape{4}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_8)
{
    check
                 (element::i64,
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{-5},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [3:0:-2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_9)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [0:3:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_10)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [0:4:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_11)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [0:5:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_12)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{3});
}

// slices are: [0:6:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_13)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{6},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{3});
}

// slices are: [0:100:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_14)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{100},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{3});
}

// slices are: [4:0:-2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_15)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [4:0:-3]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_16)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [3:2:1]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{0}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_17)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{2},
                  std::vector<int64_t>{1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{0});
}

// slices are: [4::-2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_18)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{4},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-2},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{3});
}

// slices are: [1:-5:-1]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{1}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_19)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{-5},
                  std::vector<int64_t>{-1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{1});
}

// slices are: [1:-1:-1]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{0}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_20)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{-1},
                  std::vector<int64_t>{-1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{0});
}

// slices are: [-5:5:2]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_21)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{-5},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{2},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{3});
}

// slices are: [-1:5:1]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{1}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_22)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{-1},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{1});
}

// slices are: [-1:1:1]
// dtype is: int64
// input shape is: Shape{5}
// expected output shape is Shape{0}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_23)
{
    check
                 (element::i64,
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{-1},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{1},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{0});
}

// slices are: [5:2:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{1}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_24)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{2},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{1});
}

// slices are: [5:1:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_25)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [5:0:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_26)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [5::-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_27)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{5},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{2});
}

// slices are: [6:3:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{1}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_28)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{6},
                  std::vector<int64_t>{3},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{1});
}

// slices are: [6:2:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_29)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{6},
                  std::vector<int64_t>{2},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [6:1:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_30)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{6},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [6::-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_31)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{6},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{3});
}

// slices are: [7:1:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_32)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{7},
                  std::vector<int64_t>{1},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{2});
}

// slices are: [7:0:-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_33)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{7},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{},
                  std::vector<int64_t>{3});
}

// slices are: [7::-3]
// dtype is: int64
// input shape is: Shape{8}
// expected output shape is Shape{3}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_34)
{
    check
                 (element::i64,
                  std::vector<int64_t>{8},
                  std::vector<int64_t>{7},
                  std::vector<int64_t>{0},
                  std::vector<int64_t>{-3},
                  AxisSet{},
                  AxisSet{0},
                  std::vector<int64_t>{3});
}

// slices are: [0:,:4,2:6:2,7:3:-2,1:,:,:]
// dtype is: int64
// input shape is: Shape{2,4,6,8,2,2,2}
// expected output shape is Shape{2,4,2,2,1,2,2}
NGRAPH_TEST(${BACKEND_NAME}, dyn_slice_35)
{
    check
                 (element::i64,
                  std::vector<int64_t>{2,4,6,8,2,2,2},
                  std::vector<int64_t>{0,0,2,7,1,0,0},
                  std::vector<int64_t>{0,4,6,3,0,0,0},
                  std::vector<int64_t>{1,1,2,-2,1,1,1},
                  AxisSet{1,5,6},
                  AxisSet{0,4,5,6},
                  std::vector<int64_t>{2,4,2,2,1,2,2});
}
// clang-format on
